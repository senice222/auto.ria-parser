const { Scenes } = require("telegraf");
const cancelKeyboad = require("./keyboard");
const arrayLength = require("../../helpers/arrray_length");
const getPageContent = require("../../helpers/puppeteer");
const parsingHandler = require("../../handlers/parsing_handler");


const createTask = new Scenes.WizardScene(
    "parse",
    async (ctx) => {
        ctx.wizard.state.carToParse = {}
        ctx.wizard.state.deleteMessages = []

        ctx.reply(
            `‚öôÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç. (–í –¥–æ–ª–ª–∞—Ä–∞—Ö)</b>` +
            '\n<i>–ü—Ä–∏–º–µ—Ä: 15000</i>',
            {
                reply_markup: cancelKeyboad,
                parse_mode: "HTML"
            }
        ).then((msg) => ctx.wizard.state.deleteMessages.push(msg.message_id))
        ctx.wizard.next()
    },
    async (ctx) => {
        if (ctx.updateType === "message") {
            ctx.wizard.state.carToParse['budget'] = ctx.message.text

            ctx.reply(
                `üöô <b>–£–∫–∞–∂–∏—Ç–µ –º–∞—Ä–∫—É –º–∞—à–∏–Ω—ã.</b>` +
                '\n<i>–ü—Ä–∏–º–µ—Ä: BMW (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)</i>',
                {
                    reply_markup: cancelKeyboad,
                    parse_mode: "HTML"
                }
            ).then((msg) => ctx.wizard.state.deleteMessages.push(msg.message_id))
            ctx.wizard.next()
        }
    },
    async (ctx) => {
        if (ctx.updateType === "message") {
            ctx.wizard.state.carToParse['mark'] = ctx.message.text

            ctx.reply(
                `üåÜ <b>–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥. (—É–∫—Ä. –º–æ–≤–æ—é)</b>` +
                '\n<i>–ü—Ä–∏–º–µ—Ä: –û–¥–µ—Å–∞</i>',
                {
                    reply_markup: cancelKeyboad,
                    parse_mode: "HTML"
                }
            ).then((msg) => ctx.wizard.state.deleteMessages.push(msg.message_id))
            ctx.wizard.next()
        }
    },
    async (ctx) => {
        if (ctx.updateType === "message") {
            ctx.wizard.state.carToParse['city'] = ctx.message.text

            ctx.reply(
                `üìñ <b>–ö–æ–ª–∏—á–µ–≤—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü —Å –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ —Å–ø–∞—Ä—Å–∏—Ç—å.</b>` +
                '\n<i>–ü—Ä–∏–º–µ—Ä: 10</i>',
                {
                    reply_markup: cancelKeyboad,
                    parse_mode: "HTML"
                }
            ).then((msg) => ctx.wizard.state.deleteMessages.push(msg.message_id))
            ctx.wizard.next()
        }
    },
    async (ctx) => {
        if (ctx.updateType === "message") {
            ctx.wizard.state.carToParse['pages'] = ctx.message.text

            ctx.reply('‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞...');
        
            for (const page of arrayLength(ctx.wizard.state.carToParse.pages)) {
                const URL = `https://auto.ria.com/uk/legkovie/${ctx.wizard.state.carToParse['mark']}/?page=${page}`
                const content = await getPageContent(URL)
                await parsingHandler(content, ctx.wizard.state.carToParse, ctx)
            }
            await ctx.scene.leave()
        }
    },
)

createTask.on("message", async (ctx, next) => {
    ctx.wizard.state.deleteMessages.push(ctx.message.message_id)
    next()
})

createTask.action("?cancelScene", async (ctx) => {
    ctx.wizard.state.deleteMessages.map(msg => ctx.deleteMessage(msg))
    ctx.answerCbQuery('–£—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ!', { show_alert: true })
    ctx.scene.leave()
})

module.exports = createTask